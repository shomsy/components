Alright, here comes a thorough **developer-facing architectural and flow-level documentation** of your routing system—from the initial HTTP request all the way to controller dispatch.

---

# 🧭 Gemini HTTP Routing System
**Developer Documentation – Request Lifecycle & Routing Pipeline**

## 🔁 High-Level Overview

This routing system adheres to **Clean Architecture** and leverages a **pipeline + middleware execution model** inspired by Laravel and Symfony. Each incoming HTTP request passes through several distinct layers of processing:

1. **Router Kernel**: Entry point.
2. **HttpRequestRouter**: Resolves the route.
3. **RouteDefinition**: Encapsulates route metadata.
4. **RoutePipelineFactory**: Constructs a middleware pipeline.
5. **RoutePipeline**: Executes middleware and dispatches controller.
6. **ControllerDispatcher**: Calls the controller action.

---

## 1. 🧵 `RouterKernel::handle(Request)`
**File**: `Kernel/RouterKernel.php`

This is where everything starts. A PSR-7 `Request` object comes in, and the RouterKernel does the following:

- Calls `HeadRequestFallback::resolve()` to convert HEAD requests to GET if needed.
- Calls `HttpRequestRouter::resolve()` to find a `RouteDefinition`.
- Injects route parameters and defaults into the request.
- Uses `RoutePipelineFactory::create()` to prepare the middleware chain.
- Finally, calls `RoutePipeline::dispatch()` to begin the middleware-to-controller pipeline execution.

🔧 This is the main orchestrator.

---

## 2. 🧭 `HttpRequestRouter::resolve(Request)`
**Role**: Parses the URI and HTTP method to find a matching route.

Returns a fully-formed `RouteDefinition`, which includes:
- The controller/action to call.
- Defined middleware.
- Route parameters and defaults.
- Authorization requirements.

---

## 3. 📦 `RouteDefinition`
**Role**: An immutable value object representing a route.

Contains:
- `middleware`: array of class names or group aliases.
- `action`: callable/controller+method array.
- `parameters`: parsed URI parameters.
- `defaults`: fallback route parameters.
- `authorization`: optional policy for route access.

This object is passed to all downstream components.

---

## 4. 🛠 `RoutePipelineFactory::create(RouteDefinition)`
**File**: `Routing/RoutePipelineFactory.php`

This class does the following:
- Resolves all middleware entries using `MiddlewareResolver`.
- Constructs and returns a `RoutePipeline` instance.
- Injects the container, dispatcher, and resolved middleware.

💡 Think of it as a *smart assembler* for request pipelines.

---

## 5. 🧮 `MiddlewareResolver::resolve()`
Resolves entries in `$route->middleware`, which could be:
- Middleware group aliases (like `web`, `api`)
- FQCNs (like `App\Middleware\RateLimiter`)

Internally it:
- Calls `MiddlewareGroupResolver::hasGroup()` and `resolveGroup()` for aliases.
- Validates each entry via `class_exists()`.

The output is a flattened array of FQCNs, ready for injection.

---

## 6. 🧬 `RoutePipeline::dispatch(Request)`
**File**: `Routing/RoutePipeline.php`

This is the **chain of responsibility** executor. It:

- Adds `AuthorizeMiddleware` if the route has a policy.
- Merges route stages (e.g., logging) and middleware.
- Uses `array_reduce()` to wrap the middleware as closures, reversed for proper ordering.
- Passes the request down the chain.
- The last function in the chain is a call to the controller via `ControllerDispatcher`.

This is your custom version of Laravel’s `Illuminate\Pipeline`.

---

## 7. ⚙️ `ControllerDispatcher::dispatch()`
This class:
- Resolves controller via container.
- Calls the designated method.
- Injects the request or route attributes as needed.

It’s the **very last** thing that runs, after all middleware is satisfied.

---

## 🧠 Example Lifecycle

```php
GET /dashboard → RouteKernel → HttpRequestRouter → RouteDefinition
                → RoutePipelineFactory → MiddlewareResolver
                → RoutePipeline (SecurityHeaders → CSRF → Auth → ControllerDispatcher)
```

---

## 🪵 Logging & Debug Tips

- Use logging in `MiddlewareResolver::resolve()` to debug group resolution.
- Dump the final `$pipeline` array in `RoutePipeline::dispatch()` if things seem skipped.
- Exception stack traces almost always point to the specific middleware that failed.

---

Let me know if you want this exported to Markdown or want diagrammatic flow too. This is your personal Laravel-lite 🧙‍♂️.