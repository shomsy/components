=== DirectoryInitializer.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem;

use Exception;

/**
 * Class to handle directory initialization, ensuring the directory exists,
 * has correct permissions, and is writable. This is critical for scenarios
 * where the application's smooth operation depends on specific directory setups.
 */
readonly class DirectoryInitializer
{
    // Number of attempts to make the directory writable before failing
    private const int RETRY_ATTEMPTS = 3;

    // Delay between retry attempts in microseconds
    private const int RETRY_DELAY = 100000;

    /**
     * DirectoryInitializer constructor.
     * Automatically initializes the directory by creating it if it doesn't exist,
     * setting permissions, and ensuring it is writable.
     *
     * @param string               $directoryPath The path to the directory to be initialized.
     * @param FileServiceInterface $fileService   The file service to handle directory operations.
     *
     * @throws \Exception
     * @throws \Exception
     */
    public function __construct(
        private string               $directoryPath,
        private FileServiceInterface $fileService
    ) {
        $this->initializeDirectory();
    }

    /**
     * Initializes the directory by creating it if necessary and setting permissions.
     * Ensures the directory is writable, which is crucial for subsequent operations.
     *
     * @throws Exception if the directory can't be created or made writable.
     */
    private function initializeDirectory() : void
    {
        // Only create the directory if it does not exist to avoid unnecessary operations
        if (! $this->fileService->isDirectory(path: $this->directoryPath) &&
            ! $this->fileService->createDirectory(path: $this->directoryPath, permissions: 0755)) {
            throw new Exception(message: 'Failed to create directory at ' . $this->directoryPath);
        }

        // Set permissions to 0755 and ensure the directory is writable
        $this->fileService->setPermissions(path: $this->directoryPath, permissions: 0755);
        $this->ensureWritable();
    }

    /**
     * Tries to ensure the directory is writable using multiple attempts.
     * This approach accounts for transient file system issues that may temporarily block write access.
     *
     * @throws Exception if the directory cannot be made writable after the given attempts.
     */
    private function ensureWritable() : void
    {
        for ($attempt = 1; $attempt <= self::RETRY_ATTEMPTS; ++$attempt) {
            // Attempt to write to the directory or retry after a delay
            if ($this->fileService->isWritable(path: $this->directoryPath) || $this->attemptFileCreation()) {
                return;
            }

            usleep(self::RETRY_DELAY);
        }

        throw new Exception(
            message: sprintf(
                         'Unable to make the directory writable at %s. Check file system permissions.',
                         $this->directoryPath
                     )
        );
    }

    /**
     * Attempts to create and write to a test file in the directory to check writability.
     * Removes the test file if successful, maintaining the directory's state.
     *
     * @return bool True if the directory is writable, false otherwise.
     */
    private function attemptFileCreation() : bool
    {
        $testFilePath = $this->directoryPath . '/.write_test';

        // Create the test file if it doesn't exist
        if (! $this->fileService->fileExists(path: $testFilePath)) {
            $this->fileService->createFile(path: $testFilePath);
        }

        // Set permissions for the test file to 0644
        $this->fileService->setPermissions(path: $testFilePath, permissions: 0644);

        // Check if the test file is writable
        $isWritable = $this->fileService->isWritable(path: $testFilePath);
        if ($isWritable) {
            unlink($testFilePath); // Clean up the test file if everything is functioning correctly
        }

        return $isWritable;
    }
}
=== Exceptions/DirectoryCreationException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Exceptions;

use RuntimeException;

class DirectoryCreationException extends RuntimeException {}
=== Exceptions/DirectoryDeletionException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Exceptions;

use RuntimeException;

class DirectoryDeletionException extends RuntimeException {}
=== Exceptions/FileDeleteException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Exceptions;

use RuntimeException;

class FileDeleteException extends RuntimeException {}
=== Exceptions/FileNotFoundException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Exceptions;

use RuntimeException;

class FileNotFoundException extends RuntimeException {}

=== Exceptions/FileWriteException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Exceptions;

use RuntimeException;

class FileWriteException extends RuntimeException {}
=== FileLogWriterTest.php ===
<?php

declare(strict_types=1);

namespace Tests\Unit;

use Gemini\Logging\FileLogWriter;
use Gemini\Logging\FileServiceInterface;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

final class FileLogWriterTest extends TestCase
{
    private readonly MockObject $mockObject;

    public function testInitializeLogFileSetsFallbackPathWhenDirectoryCreationFails() : void
    {
        $this->mockObject->method('isDirectory')->willReturn(false);
        $this->mockObject->method('createDirectory')->willReturn(false);

        $fileLogWriter = new FileLogWriter('/invalid/path/to/log.log', $this->mockObject);

        $this->assertFilePathEquals('/tmp/fallback-log.log', $fileLogWriter);
    }

    public function testEnsureWritableCreatesFileWhenNotWritable() : void
    {
        $this->mockObject->method('isWritable')->willReturn(false);
        $this->mockObject->method('fileExists')->willReturn(false);
        $this->mockObject->method('createFile')->willReturn(true);

        $this->mockObject->expects($this->once())->method('createFile');

        new FileLogWriter('/path/to/log.log', $this->mockObject);
    }

    public function testWriteAttemptsToAppendToProvidedFilePath() : void
    {
        $this->mockObject->method('appendToFile')->willReturn(true);

        $fileLogWriter = new FileLogWriter('/path/to/log.log', $this->mockObject);
        $fileLogWriter->write('Test log entry');

        $this->mockObject->expects($this->once())->method('appendToFile')->with('/path/to/log.log', 'Test log entry');
    }

    // Additional tests...
}

=== FileServiceInterface.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem;

/**
 * Interface for file services, outlining methods for directory and file operations.
 *
 * This interface defines the common operations for interacting with the filesystem.
 * Implementing classes should provide the actual logic for handling these filesystem tasks.
 */
interface FileServiceInterface
{
    /**
     * Checks if the given path is a directory.
     *
     * @param string $path The path to check.
     *
     * @return bool True if the path is a directory, false otherwise.
     */
    public function isDirectory(string $path) : bool;

    /**
     * Creates a directory at the specified path with given permissions.
     *
     * @param string $path        The path where the directory should be created.
     * @param int    $permissions The permissions to set for the directory.
     *
     * @return bool True if the directory was successfully created, false otherwise.
     */
    public function createDirectory(string $path, int $permissions) : bool;

    /**
     * Sets permissions for the specified path.
     *
     * @param string $path        The path for which to set the permissions.
     * @param int    $permissions The permissions to set.
     *
     * @return bool True if the permissions were successfully set, false otherwise.
     */
    public function setPermissions(string $path, int $permissions) : bool;

    /**
     * Checks if the given path is writable.
     *
     * @param string $path The path to check.
     *
     * @return bool True if the path is writable, false otherwise.
     */
    public function isWritable(string $path) : bool;

    /**
     * Checks if a file exists at the specified path.
     *
     * @param string $path The path to check.
     *
     * @return bool True if the file exists, false otherwise.
     */
    public function fileExists(string $path) : bool;

    /**
     * Creates a new file at the specified path.
     *
     * @param string $path The path where the file should be created.
     *
     * @return bool True if the file was successfully created, false otherwise.
     */
    public function createFile(string $path) : bool;

    /**
     * Appends content to a file at the specified path.
     *
     * @param string $path    The path of the file to which content should be appended.
     * @param string $content The content to append to the file.
     *
     * @return bool True if the content was successfully appended, false otherwise.
     */
    public function appendToFile(string $path, string $content) : bool;
}
=== FilesystemService.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem;

/**
 * Logging to handle file system operations.
 *
 * This service abstracts common file system operations such as writing files
 * and ensuring that directories are writable.
 */
class FilesystemService
{
    /**
     * Write content to a file.
     *
     * @param string $fileName The file path.
     * @param string $content  The content to write into the file.
     */
    public function writeFile(string $fileName, string $content) : void
    {
        file_put_contents(filename: $fileName, data: $content);
    }

    /**
     * Ensure the given directory is writable. If it's not writable, attempt to change the permissions.
     *
     * This method checks if the specified directory is writable and, if not, it attempts to set the necessary
     * permissions (e.g., 0777) to allow writing.
     *
     * @param string $directory The directory path to check.
     */
    public function ensureDirectoryIsWritable(string $directory) : void
    {
        if (! file_exists(filename: $directory)) {
            mkdir(
                directory  : $directory,
                permissions: 0755,
                recursive  : true,
            ); // Recursively create directories if they don't exist
        }

        if (! is_writable(filename: $directory)) {
            chmod(filename: $directory, permissions: 0755); // Ensure it is writable
        }
    }
}

=== LocalFileService.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem;

/**
 * Implementation of FileServiceInterface for local filesystem operations.
 * This service handles directory and file management tasks described by the interface.
 */
class LocalFileService implements FileServiceInterface
{
    /**
     * Checks if the given path is a directory.
     *
     * @param string $path The path to check.
     *
     * @return bool True if the path is a directory, false otherwise.
     */
    public function isDirectory(string $path) : bool
    {
        return is_dir($path);
    }

    /**
     * Creates a directory with the specified permissions.
     *
     * @param string $path        The directory path to create.
     * @param int    $permissions The permissions to set for the directory.
     *
     * @return bool True on success, false on failure.
     *
     * Note: The third argument for mkdir() is set to true to ensure recursive directory creation.
     */
    public function createDirectory(string $path, int $permissions) : bool
    {
        return ! (! is_dir($path) && ! @mkdir($path, $permissions, true));
    }


    /**
     * Sets the permissions for the given path.
     *
     * @param string $path        The path to set permissions for.
     * @param int    $permissions The new permissions.
     *
     * @return bool True on success, false on failure.
     */
    public function setPermissions(string $path, int $permissions) : bool
    {
        return chmod($path, $permissions);
    }

    /**
     * Checks if the given path is writable.
     *
     * @param string $path The path to check.
     *
     * @return bool True if the path is writable, false otherwise.
     */
    public function isWritable(string $path) : bool
    {
        return is_writable($path);
    }

    /**
     * Checks if a file exists at the given path.
     *
     * @param string $path The path to check.
     *
     * @return bool True if the file exists, false otherwise.
     */
    public function fileExists(string $path) : bool
    {
        return file_exists($path);
    }

    /**
     * Creates an empty file at the specified path.
     *
     * @param string $path The file path to create.
     *
     * @return bool True on success, false on failure.
     *
     * Note: Uses touch() to create the file if it does not exist.
     */
    public function createFile(string $path) : bool
    {
        if (! $this->fileExists(path: $path)) {
            return touch($path);
        }

        return true;
    }

    /**
     * Appends content to a file at the specified path.
     *
     * @param string $path    The file path to append content to.
     * @param string $content The content to append.
     *
     * @return bool True on success, false on failure.
     *
     * Note: Uses FILE_APPEND to add content to the end of the file and LOCK_EX to prevent simultaneous write access.
     */
    public function appendToFile(string $path, string $content) : bool
    {
        // Ensure directory exists
        $directory = dirname($path);
        if (! $this->isDirectory(path: $directory) && ! $this->createDirectory(path: $directory, permissions: 0755)) {
            return false;
        }

        return file_put_contents($path, $content . PHP_EOL, FILE_APPEND | LOCK_EX) !== false;
    }
}

=== Storage/FileNotFoundException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Storage;

use Exception;

class FileNotFoundException extends Exception
{
    public function __construct(string $string)
    {
        parent::__construct($string);
    }
}
=== Storage/FileStorageInterface.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Storage;

/**
 * Interface for file storage operations.
 *
 * This interface outlines the methods required to interact with a file system,
 * including reading, writing, deleting files, and managing directories. It standardizes
 * file operations to ensure any implementing class provides these capabilities.
 */
interface FileStorageInterface
{
    /**
     * Reads the content of a file at the specified path.
     *
     * @param string $path The path to the file.
     *
     * @return string The file content.
     */
    public function read(string $path) : string;

    /**
     * Writes content to a file at the specified path.
     *
     * @param string $path    The path to the file.
     * @param string $content The content to write.
     *
     * @return bool True on success, false otherwise.
     */
    public function write(string $path, string $content, bool $append = false) : bool;

    /**
     * Deletes the file at the specified path.
     *
     * @param string $path The path to the file.
     *
     * @return bool True on success, false otherwise.
     */
    public function delete(string $path) : bool;

    /**
     * Checks if a file or directory exists at the specified path.
     *
     * @param string $path The path to the file or directory.
     *
     * @return bool True if exists, false otherwise.
     */
    public function exists(string $path) : bool;

    /**
     * Creates a directory at the specified path.
     *
     * @param string $directory The path to the directory.
     *
     * @return bool True on success, false otherwise.
     */
    public function createDirectory(string $directory) : bool;

    /**
     * Deletes a directory at the specified path.
     *
     * @param string $directory The path to the directory.
     *
     * @return bool True on success, false otherwise.
     */
    public function deleteDirectory(string $directory) : bool;

    /**
     * Sets permissions for a file or directory at the specified path.
     *
     * @param string $path        The path to the file or directory.
     * @param int    $permissions The permissions to set.
     *
     * @return bool True on success, false otherwise.
     */
    public function setPermissions(string $path, int $permissions) : bool;

    /**
     * Checks if the file or directory at the specified path is writable.
     *
     * @param string $path The path to check for write permissions.
     *
     * @return bool True if the path is writable, false otherwise.
     */
    public function isWritable(string $path) : bool;

    /**
     * Checks if the given path has the specified permissions.
     *
     * @param string $path        The file or directory path to check permissions for.
     * @param int    $permissions The permissions to check against.
     *
     * @return bool True if the path has the specified permissions, false otherwise.
     */
    public function hasPermission(string $path, int $permissions) : bool;

    /**
     * Clears the contents of the specified directory.
     *
     * @param string $directory The directory path to clear.
     *
     * @return bool True if the directory was successfully cleared, false otherwise.
     */
    public function clear(string $directory) : bool;
}
=== Storage/Filesystem.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Storage;

use Exception;

/**
 * Class Filesystem
 *
 * This class acts as an abstraction layer over various file storage mechanisms.
 * It allows switching between different types of storage (e.g., local, cloud)
 * based on the configuration provided.
 */
readonly class Filesystem
{
    /**
     * Filesystem constructor. Initializes the class with a specific file storage implementation.
     *
     * @param FileStorageInterface $fileStorage The file storage implementation to use.
     */
    public function __construct(private FileStorageInterface $fileStorage) {}

    /**
     * Retrieves the disk storage instance based on the given disk name.
     *
     * This method checks the configuration for the given disk name and returns the appropriate
     * file storage implementation. If the disk driver is not supported, an exception is thrown.
     *
     * @param string|null $name The name of the disk configuration to retrieve. If null, the default configuration will
     *                          be used.
     *
     * @return FileStorageInterface The instance of the file storage based on the disk configuration.
     * @throws \Gemini\Container\Exceptions\FrameworkContainerException
     * @throws \Psr\Container\ContainerExceptionInterface
     * @throws \Psr\Container\NotFoundExceptionInterface
     * @throws \Exception
     */
    public function disk(string|null $name = null) : FileStorageInterface
    {
        $diskConfig = config(key: "filesystems.disks." . $name, default: config(key: "filesystems.default"));

        if ($diskConfig['driver'] === 'local') {
            return app(abstract: LocalFileStorage::class);
        }

        throw new Exception(message: 'Unsupported disk driver: ' . $diskConfig['driver']);
    }

    /**
     * Reads the content of the given file path.
     *
     * @param string $path The path of the file to read.
     *
     * @return string The content of the file.
     */
    public function read(string $path) : string
    {
        return $this->fileStorage->read(path: $path);
    }

    /**
     * Writes content to the given file path.
     *
     * @param string $path    The path where the content should be written.
     * @param string $content The content to write.
     *
     * @return bool True if the writing was successful, false otherwise.
     */
    public function write(string $path, string $content, bool $append = false) : bool
    {
        return $this->fileStorage->write(path: $path, content: $content, append: $append);
    }

    /**
     * Deletes the file at the specified path.
     *
     * @param string $path The path of the file to delete.
     *
     * @return bool True if the file was successfully deleted, false otherwise.
     */
    public function delete(string $path) : bool
    {
        return $this->fileStorage->delete(path: $path);
    }

    /**
     * Checks if a file exists at the specified path.
     *
     * @param string $path The path to check for existence.
     *
     * @return bool True if the file exists, false otherwise.
     */
    public function exists(string $path) : bool
    {
        return $this->fileStorage->exists(path: $path);
    }

    /**
     * Creates a directory at the specified path.
     *
     * @param string $directory The path of the directory to create.
     *
     * @return bool True if the directory was successfully created, false otherwise.
     */
    public function createDirectory(string $directory) : bool
    {
        return $this->fileStorage->createDirectory(directory: $directory);
    }

    /**
     * Deletes the directory at the specified path.
     *
     * @param string $directory The path of the directory to delete.
     *
     * @return bool True if the directory was successfully deleted, false otherwise.
     */
    public function deleteDirectory(string $directory) : bool
    {
        return $this->fileStorage->deleteDirectory(directory: $directory);
    }

    /**
     * Sets permissions for the file at the specified path.
     *
     * @param string $path        The path of the file.
     * @param int    $permissions The permissions to set.
     *
     * @return bool True if the permissions were successfully set, false otherwise.
     */
    public function setPermissions(string $path, int $permissions) : bool
    {
        return $this->fileStorage->setPermissions(path: $path, permissions: $permissions);
    }

    /**
     * Checks if the specified file or directory has the given permissions.
     *
     * This method allows checking for specific permissions (e.g., readability, writability).
     *
     * @param string $path        The path of the file or directory to check.
     * @param int    $permissions The permissions to check for (e.g., 0755).
     *
     * @return bool True if the path has the specified permissions, false otherwise.
     */
    public function hasPermission(string $path, int $permissions) : bool
    {
        return $this->fileStorage->hasPermission(path: $path, permissions: $permissions);
    }

    /**
     * Clears the contents of the specified directory.
     *
     * This method leverages the storage component to remove all files and subdirectories within the given directory.
     *
     * @param string $directory The path to the directory to be cleared.
     *
     * @return bool Returns true if the directory was successfully cleared, otherwise false.
     */
    public function clear(string $directory) : bool
    {
        return $this->fileStorage->clear(directory: $directory);
    }

    /**
     * Checks if the specified path is writable in the file storage.
     *
     * @param string $path The path to be checked for write permissions.
     *
     * @return bool Returns true if the path is writable, otherwise false.
     */
    public function isWritable(string $path) : bool
    {
        return $this->fileStorage->isWritable(path: $path);
    }


}

=== Storage/FileWriteException.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Storage;

use Exception;

class FileWriteException extends Exception
{
    public function __construct(string $string)
    {
        parent::__construct($string);
    }
}
=== Storage/LocalFileStorage.php ===
<?php

declare(strict_types=1);

namespace Gemini\Filesystem\Storage;

use FilesystemIterator;
use Gemini\Filesystem\Exceptions\DirectoryCreationException;
use Gemini\Filesystem\Exceptions\DirectoryDeletionException;
use Gemini\Filesystem\Exceptions\FileDeleteException;
use RuntimeException;

/**
 * Class LocalFileStorage
 *
 * Provides local file storage operations, including reading, writing, and managing directories.
 */
class LocalFileStorage implements FileStorageInterface
{
    /**
     * Reads the content of a file.
     *
     * @param string $path Path to the file.
     *
     * @return string The file contents.
     * @throws FileNotFoundException If the file does not exist or cannot be read.
     */
    public function read(string $path) : string
    {
        if (! file_exists($path)) {
            throw new FileNotFoundException(string: sprintf('File not found: %s', $path));
        }

        if (! is_readable($path)) {
            throw new FileNotFoundException(string: sprintf('File is not readable: %s', $path));
        }

        $content = file_get_contents($path);
        if ($content === false) {
            throw new RuntimeException(message: sprintf('Failed to read file: %s', $path));
        }

        return $content;
    }

    /**
     * Writes content to a file, creating directories if necessary.
     *
     * @param string $path    Path to the file.
     * @param string $content Content to write.
     *
     * @return bool True on success.
     * @throws FileWriteException If writing fails.
     */
    public function write(string $path, string $content, bool $append = false) : bool
    {
        $directory = dirname($path);
        if (! is_dir($directory) && ! $this->createDirectory(directory: $directory)) {
            throw new FileWriteException(string: sprintf('Failed to create directory: %s', $directory));
        }

        $flags = $append ? FILE_APPEND | LOCK_EX : 0;
        if (file_put_contents($path, $content . PHP_EOL, $flags) === false) {
            throw new FileWriteException(string: "Failed to write to file: {$path}");
        }

        return true;
    }

    /**
     * Creates a directory with specified permissions.
     *
     * @param string $directory   Path to the directory.
     * @param int    $permissions Permissions to set (default: 0755).
     *
     * @return bool True on success.
     * @throws DirectoryCreationException If creation fails.
     */
    public function createDirectory(string $directory, int $permissions = 0755) : bool
    {
        if (is_dir($directory)) {
            return true; // Directory already exists.
        }

        if (! mkdir($directory, $permissions, true) && ! is_dir($directory)) {
            throw new DirectoryCreationException(message: sprintf('Failed to create directory: %s', $directory));
        }

        return true;
    }

    /**
     * Checks if a file or directory exists.
     *
     * @param string $path Path to check.
     *
     * @return bool True if it exists, false otherwise.
     */
    public function exists(string $path) : bool
    {
        return file_exists($path);
    }

    /**
     * Deletes a directory and its contents.
     *
     * @param string $directory Path to the directory.
     *
     * @return bool True on success.
     * @throws DirectoryDeletionException If deletion fails.
     */
    public function deleteDirectory(string $directory) : bool
    {
        if (! is_dir($directory)) {
            return true; // Non-existent directories are considered "deleted".
        }

        $this->clear(directory: $directory);

        if (! rmdir($directory)) {
            throw new DirectoryDeletionException(message: sprintf('Failed to delete directory: %s', $directory));
        }

        return true;
    }

    /**
     * Clears the contents of a directory.
     *
     * @param string $directory Path to the directory.
     *
     * @return bool True on success.
     * @throws RuntimeException If unable to clear the directory.
     */
    public function clear(string $directory) : bool
    {
        if (! is_dir($directory)) {
            throw new RuntimeException(message: sprintf('Not a directory: %s', $directory));
        }

        foreach (new FilesystemIterator(directory: $directory, flags: FilesystemIterator::SKIP_DOTS) as $item) {
            $itemPath = $item->getPathname();

            if ($item->isDir()) {
                $this->deleteDirectory(directory: $itemPath);
            } else {
                $this->delete(path: $itemPath);
            }
        }

        return true;
    }

    /**
     * Deletes a file.
     *
     * @param string $path Path to the file.
     *
     * @return bool True on success.
     * @throws FileDeleteException If deletion fails.
     */
    public function delete(string $path) : bool
    {
        if (! file_exists($path)) {
            return true; // Consider non-existent files as "deleted".
        }

        if (! unlink($path)) {
            throw new FileDeleteException(message: sprintf('Failed to delete file: %s', $path));
        }

        return true;
    }

    /**
     * Checks if a path is writable.
     *
     * @param string $path Path to check.
     *
     * @return bool True if writable, false otherwise.
     */
    public function isWritable(string $path) : bool
    {
        return is_writable($path);
    }

    /**
     * Sets permissions for a file or directory.
     *
     * @param string $path        Path to the file or directory.
     * @param int    $permissions Permissions to set.
     *
     * @return bool True on success.
     * @throws RuntimeException If chmod fails.
     */
    public function setPermissions(string $path, int $permissions) : bool
    {
        if (! file_exists($path)) {
            throw new RuntimeException(message: sprintf('Path does not exist: %s', $path));
        }

        if (! @chmod($path, $permissions)) { // Suppress warning to handle it manually
            error_log(sprintf('Failed to set permissions on: %s', $path));

            return false;
        }

        return true;
    }


    /**
     * Checks if the given path has the specified permissions.
     *
     * @param string $path        The file or directory path to check permissions for.
     * @param int    $permissions The permissions to check against.
     *
     * @return bool True if the path has the specified permissions, false otherwise.
     */
    public function hasPermission(string $path, int $permissions) : bool
    {
        if (! file_exists($path)) {
            return false; // Path does not exist, so it cannot have the specified permissions.
        }

        $actualPermissions = fileperms($path) & 0777; // Get permissions and mask to relevant bits.

        return $actualPermissions === $permissions;
    }
}

