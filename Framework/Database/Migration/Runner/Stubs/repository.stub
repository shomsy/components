<?php

declare(strict_types=1);

namespace {{Namespace}};

use Gemini\Database\QueryBuilder\QueryBuilder;
use {{EntityNamespace}}\{{EntityName}};

/**
 * Repository for {{RepositoryName}}.
 */
final class {{RepositoryName}}
{
    public function __construct(private QueryBuilder $queryBuilder) {}

    public function find(int $id): ?{{EntityName}}
    {
        $result = $this->queryBuilder
            ->table('{{TableName}}')
            ->where('id', '=', $id)
            ->first();

        return $result ? $this->mapToEntity($result) : null;
    }

    public function save({{EntityName}} $entity): int
    {
        return $this->queryBuilder
            ->table('{{TableName}}')
            ->insertGetId($entity->toArray());
    }

    public function update(int $id, {{EntityName}} $entity): bool
    {
        return $this->queryBuilder
            ->table('{{TableName}}')
            ->where('id', '=', $id)
            ->update($entity->toArray());
    }

    public function delete(int $id): bool
    {
        return $this->queryBuilder
            ->table('{{TableName}}')
            ->where('id', '=', $id)
            ->delete();
    }

    private function mapToEntity(array $data): {{EntityName}}
    {
        return new {{EntityName}}($data);
    }
}
